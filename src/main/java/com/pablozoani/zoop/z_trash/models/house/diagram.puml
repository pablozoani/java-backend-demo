@startuml

title HOUSE UML

'skinparam monochrome true
skinparam shadowing false
skinparam defaultFontName Liberation Mono
skinparam defaultFontSize 12
skinparam defaultFontColor Black
skinparam ArrowFontColor Black
skinparam ArrowColor Grey
hide empty members

class Factory {
    +{static}bathroom(Dimensions, int, boolean): BathRoom
    +{static}bedroom(Dimensions, int, boolean, boolean): BedRoom
    +{static}dimensions(double, double, double): Dimensions
    +{static}diningroom(Dimensions, int): DiningRoom
    +{static}floor(int, Room...): Floor
    +{static}kitchen(Dimensions, int, KitchenType): Kitchen
    +{static}livingroom{Dimensions, int, boolean): LivingRoom
}

Room *-- "1" Dimensions
Room *-- "1" RoomType
Floor *-- "1..*" Room
House *-- "1..*" Floor

class Dimensions {
    -length: double
    -width: double
    -height: double
    Dimensions(double, double, double)
}

enum RoomType {
    BATHROOM,
    BEDROOM,
    DININGROOM,
    KITCHEN,
    LIVINGROOM
}

class BathRoom extends Room {
    -withBathtub: boolean
    +BathRoom(Dimensions, int, boolean): BathRoom
}

class BedRoom extends Room {
    -withBalcony: boolean
    -withWardrobe: boolean
    +BedRoom(Dimensions, int, boolean, boolean): BedRoom
}

class DiningRoom extends Room {
    +DiningRoom(Dimensions, int)
}

class Kitchen extends Room {
    +enum KitchenType {Electric, Gas}
    -kitchenType: KitchenType
    +Kitchen(Dimensions, int, KitchenType): Kitchen
}

class LivingRoom extends Room {
    -withFireplace: boolean
    +LivingRoom(Dimensions, int, boolean): LivingRoom
}

abstract class Room {
    -{static}counter: int
    -dimensions: Dimensions
    -roomType: RoomType
    -id: int
    -numberOfWindows: int
    #Room(Dimensions, int, RoomType)
}

interface Floor implements Iterable {
    addRoom(Room): boolean
    findRoom(int): Room
    getFloorNumber(): int
    getRooms(): Map<Integer, Room>
    removeRoom(int): boolean
}

class FloorImpl implements Floor {
    -{static} counter: int
    -floorNumber: int
    -id: int
    -roomKey: int
    -rooms: NavigableMap<Integer, Room>
    +FloorImpl(int, Room...): Floor
}

class House implements Iterable {
    -{static} counter: int
    -id: int
    -floors: NavigableMap<Integer, Floor>
    +House(): House
    +addFloor(Floor): boolean
    +findFloor(int): Floor
    +getFloors(): NavigableMap<Integer, Floor>
    +removeFloor(int): boolean
}

@enduml